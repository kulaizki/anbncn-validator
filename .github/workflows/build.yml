name: Build Wails App

on:
  push:
    tags:
      - '*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Update app info in wails.json
        run: |
          $wailsJson = Get-Content -Path wails.json | ConvertFrom-Json
          $wailsJson.info.companyName = "Fitzsixto"
          $wailsJson.info.productName = "Word Reverser"
          $wailsJson.info.productVersion = "1.0.0"
          $wailsJson.info.copyright = "Â© 2025 Fitzsixto Development"
          $wailsJson.info.comments = "A modern desktop app for reversing words"
          $wailsJson | ConvertTo-Json -Depth 10 | Set-Content -Path wails.json
        shell: pwsh

      - name: Build Wails App
        run: wails build

      - name: Sign Windows Executable
        if: env.WINDOWS_CERT != ''
        env:
          WINDOWS_CERT: ${{ secrets.WINDOWS_CERT }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        shell: pwsh
        run: |
          Write-Host "Preparing to sign the application..."
          
          # Create certificate directory
          New-Item -ItemType directory -Path certificate -Force
          
          # Save certificate from secret
          Set-Content -Path certificate\certificate.txt -Value $env:WINDOWS_CERT
          
          # Decode the base64 certificate to pfx
          Write-Host "Decoding certificate..."
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          
          # Find signtool.exe
          Write-Host "Locating signtool..."
          $signtool = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe"
          if (-not (Test-Path $signtool)) {
            Write-Host "Default signtool path not found, searching for alternative..."
            $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | 
                        Select-Object -First 1 -ExpandProperty FullName
            
            if (-not $signtool) {
              Write-Error "signtool.exe not found. Code signing will fail."
              exit 1
            }
          }
          
          Write-Host "Using signtool at: $signtool"
          
          # Sign all executables in the build directory
          Write-Host "Signing executables..."
          $executableFiles = Get-ChildItem -Path "build\bin" -Filter "*.exe"
          
          foreach ($file in $executableFiles) {
            Write-Host "Signing file: $($file.FullName)"
            & $signtool sign /f certificate\certificate.pfx /p $env:WINDOWS_CERT_PASSWORD /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /d "Word Reverser - Made by Fitzsixto" $file.FullName
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to sign $($file.FullName). Exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
            }
            
            Write-Host "Successfully signed: $($file.FullName)"
          }
          
          Write-Host "All executables signed successfully!"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4  
        with:
          name: wails-windows-build
          path: build/bin/*.exe

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/*.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}